# ──────────────────────────────────────────────────────────────────────────────
# File: .github/workflows/baidupan-to-release.yml
# 作用：手动触发，从百度网盘下载文件，若单个文件>2G则自动分卷，然后顺序上传到指定 Release。
# 说明：
#  1) 使用 BaiduPCS-Go 并通过 Cookie 登录（只需提供 BAIDU_COOKIE）。
#  2) 多个文件通过输入完整路径，使用英文逗号分隔，逐个处理（下载一个→上传一个→删除本地→再处理下一个）。
#  3) Release 信息可在手动触发时填写（tag/name/body/draft/prerelease/target）。
#  4) 需要在 repo 的 Secrets 中配置：BAIDU_COOKIE。
# ──────────────────────────────────────────────────────────────────────────────

name: BaiduPan → GitHub Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag（若不存在会自动创建）"
        required: true
      name:
        description: "Release 名称（可选，不填则同 tag）"
        required: false
      body:
        description: "Release 说明（可选，多行可）"
        required: false
      draft:
        description: "是否创建为 Draft（true/false）"
        default: "false"
        required: true
      prerelease:
        description: "是否标记为 Pre-release（true/false）"
        default: "false"
        required: true
      target:
        description: "目标提交/分支（默认当前默认分支）"
        required: false
      baidu_paths:
        description: |
          需要下载的百度网盘“文件完整路径”，多个文件用英文逗号分隔。
          示例：/我的资源/大文件1.iso,/我的资源/大文件2.zip
        required: true
      part_size_mb:
        description: "分卷大小（MB），默认 2048（2GB 上限内留余量）"
        default: "2048"
        required: true

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            curl ca-certificates unzip p7zip-full \
            coreutils jq git

      - name: Install gh CLI
        uses: actions/setup-gh-cli@v2

      - name: Download BaiduPCS-Go (Linux amd64)
        shell: bash
        run: |
          set -euxo pipefail
          VERSION="v3.9.0"
          ARCHIVE="BaiduPCS-Go-${VERSION}-linux-amd64.zip"
          URL="https://github.com/qjfoidnh/BaiduPCS-Go/releases/download/${VERSION}/${ARCHIVE}"
          curl -L "$URL" -o /tmp/bpcs.zip
          unzip -o /tmp/bpcs.zip -d /tmp/bpcs
          sudo install -m 0755 /tmp/bpcs/BaiduPCS-Go /usr/local/bin/BaiduPCS-Go
          BaiduPCS-Go -v

      - name: Login BaiduPCS-Go with Cookie
        env:
          BAIDU_COOKIE: ${{ secrets.BAIDU_COOKIE }}
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -z "${BAIDU_COOKIE:-}" ]]; then
            echo "BAIDU_COOKIE is required. Please add it in repository Secrets." >&2
            exit 1
          fi
          BaiduPCS-Go login -cookie "$BAIDU_COOKIE"
          BaiduPCS-Go who

      - name: Create release if missing
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euxo pipefail
          TAG='${{ github.event.inputs.tag }}'
          NAME='${{ github.event.inputs.name }}'
          BODY='${{ github.event.inputs.body }}'
          TARGET='${{ github.event.inputs.target }}'
          DRAFT='${{ github.event.inputs.draft }}'
          PRERELEASE='${{ github.event.inputs.prerelease }}'

          if ! gh release view "$TAG" >/dev/null 2>&1; then
            args=("$TAG")
            [[ -n "$NAME" ]] && args+=(--title "$NAME") || args+=(--title "$TAG")
            [[ -n "$BODY" ]] && args+=(--notes "$BODY") || args+=(--notes "")
            [[ -n "$TARGET" ]] && args+=(--target "$TARGET")
            [[ "$DRAFT" == "true" ]] && args+=(--draft)
            [[ "$PRERELEASE" == "true" ]] && args+=(--prerelease)
            gh release create "${args[@]}"
          fi

      - name: Run downloader & uploader (sequential)
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -ra PATHS <<< "${{ github.event.inputs.baidu_paths }}"
          PART_SIZE_MB='${{ github.event.inputs.part_size_mb }}'
          TAG='${{ github.event.inputs.tag }}'

          workdir="$GITHUB_WORKSPACE/.baidu_cache"
          mkdir -p "$workdir"

          for remote in "${PATHS[@]}"; do
            cd "$workdir"
            echo "==> Downloading: $remote"
            rm -rf ./*

            BaiduPCS-Go download -saveto . "$remote"

            mapfile -t new_files < <(find . -maxdepth 1 -type f -printf '%P\n' | sort)
            for f in "${new_files[@]}"; do
              [[ -f "$f" ]] || continue
              size_bytes=$(stat -c '%s' "$f")
              echo "    -> Local file: $f ($size_bytes bytes)"

              max_bytes=$(( PART_SIZE_MB * 1024 * 1024 ))
              if (( size_bytes > max_bytes )); then
                echo "    -> Split file into ${PART_SIZE_MB}MB parts"
                prefix="${f}.part-"
                split -b "${PART_SIZE_MB}m" -d -a 3 --additional-suffix=".bin" "$f" "$prefix"
                echo "${f}" > "${f}.manifest"
                echo "cat ${prefix}* > ${f} # reassemble" >> "${f}.manifest"

                for p in ${prefix}*; do
                  echo "       uploading $p"
                  gh release upload "$TAG" "$p" --clobber
                done
                gh release upload "$TAG" "${f}.manifest" --clobber
              else
                echo "    -> Uploading single file to release"
                gh release upload "$TAG" "$f" --clobber
              fi

              rm -f -- "$f"
              rm -f -- ${f}.part-* 2>/dev/null || true
            done

            find . -maxdepth 1 -type f -name "._*" -delete || true
          done

          echo "All files processed sequentially."
