# ──────────────────────────────────────────────────────────────────────────────
# File: .github/workflows/baidupan-to-release-comma.yml
# 作用：手动触发；输入为“逗号分隔的**完整文件路径**”；严格按顺序：下载 1 个 →（必要时分卷）上传 → 删除本地 → 下一个。
# 登录：浏览器 Cookie（只需 BAIDU_COOKIE）。不使用分享链接；不递归目录（仅文件路径）。
# ──────────────────────────────────────────────────────────────────────────────

name: BaiduPan → GitHub Release (Comma Files, Sequential)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag（若不存在会自动创建）"
        required: true
      name:
        description: "Release 名称（可选，不填则同 tag）"
        required: false
      body:
        description: "Release 说明（可选，多行可）"
        required: false
      draft:
        description: "是否创建为 Draft（true/false）"
        default: "false"
        required: true
      prerelease:
        description: "是否标记为 Pre-release（true/false）"
        default: "false"
        required: true
      target:
        description: "目标提交/分支（默认当前默认分支）"
        required: false
      baidu_files:
        description: |
          逗号分隔的**完整文件路径**（仅文件，非目录）。示例：
          /我的资源/文件1.iso, /我的资源/文件2.zip
        required: true
      part_size_mb:
        description: "分卷大小（MB），默认 2048（≈2GB）"
        default: "2048"
        required: true

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            curl ca-certificates unzip p7zip-full \
            coreutils jq git

      - name: Install gh CLI
        uses: cli/gh-action@v2

      - name: Install BaiduPCS-Go (Linux amd64)
        shell: bash
        run: |
          set -euxo pipefail
          VERSION="v3.9.0"
          ARCHIVE="BaiduPCS-Go-${VERSION}-linux-amd64.zip"
          URL="https://github.com/qjfoidnh/BaiduPCS-Go/releases/download/${VERSION}/${ARCHIVE}"
          curl -L "$URL" -o /tmp/bpcs.zip
          unzip -o /tmp/bpcs.zip -d /tmp/bpcs
          sudo install -m 0755 /tmp/bpcs/BaiduPCS-Go /usr/local/bin/BaiduPCS-Go
          BaiduPCS-Go -v

      - name: Login BaiduPCS-Go with Cookie
        env:
          BAIDU_COOKIE: ${{ secrets.BAIDU_COOKIE }}
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -z "${BAIDU_COOKIE:-}" ]]; then
            echo "BAIDU_COOKIE is required. Please add it in repository Secrets." >&2
            exit 1
          fi
          # 不同分支参数可能不同，这里先尝试 -cookies，再退回 -cookie
          if ! BaiduPCS-Go login -cookies="$BAIDU_COOKIE"; then
            BaiduPCS-Go login -cookie "$BAIDU_COOKIE"
          fi
          BaiduPCS-Go who

      - name: Create release if missing
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euxo pipefail
          TAG='${{ github.event.inputs.tag }}'
          NAME='${{ github.event.inputs.name }}'
          BODY='${{ github.event.inputs.body }}'
          TARGET='${{ github.event.inputs.target }}'
          DRAFT='${{ github.event.inputs.draft }}'
          PRERELEASE='${{ github.event.inputs.prerelease }}'

          if ! gh release view "$TAG" >/dev/null 2>&1; then
            args=("$TAG")
            [[ -n "$NAME" ]] && args+=(--title "$NAME") || args+=(--title "$TAG")
            [[ -n "$BODY" ]] && args+=(--notes "$BODY") || args+=(--notes "")
            [[ -n "$TARGET" ]] && args+=(--target "$TARGET")
            [[ "$DRAFT" == "true" ]] && args+=(--draft)
            [[ "$PRERELEASE" == "true" ]] && args+=(--prerelease)
            gh release create "${args[@]}"
          fi

      - name: Download each file → upload → delete (strictly sequential)
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          RAW='${{ github.event.inputs.baidu_files }}'

          # 解析逗号分隔，修剪空白
          IFS=',' read -r -a PATHS <<< "$RAW"
          cleaned=()
          for p in "${PATHS[@]}"; do
            p=$(echo "$p" | xargs)
            [[ -z "$p" ]] && continue
            cleaned+=("$p")
          done
          PATHS=("${cleaned[@]}")

          PART_SIZE_MB='${{ github.event.inputs.part_size_mb }}'
          TAG='${{ github.event.inputs.tag }}'

          workdir="$GITHUB_WORKSPACE/.baidu_cache"
          mkdir -p "$workdir"

          for remote in "${PATHS[@]}"; do
            echo "==> Processing file: $remote"
            itemdir=$(mktemp -d "$workdir/item-XXXXXX")

            # 仅下载该“文件”到 itemdir
            if ! BaiduPCS-Go download -saveto "$itemdir" "$remote"; then
              echo "    -> 下载失败，跳过：$remote" >&2
              rm -rf -- "$itemdir"
              continue
            fi

            # 只处理 itemdir 根下的一层文件
            mapfile -t files < <(find "$itemdir" -maxdepth 1 -type f -printf '%f\n' | sort)
            if (( ${#files[@]} == 0 )); then
              echo "    -> 未找到文件（可能是目录或无权限）：$remote" >&2
              rm -rf -- "$itemdir"
              continue
            fi

            for fname in "${files[@]}"; do
              f="$itemdir/$fname"
              size_bytes=$(stat -c '%s' "$f")
              echo "    -> Local file: $fname ($size_bytes bytes)"

              max_bytes=$(( PART_SIZE_MB * 1024 * 1024 ))
              if (( size_bytes > max_bytes )); then
                echo "    -> Split into ${PART_SIZE_MB}MB parts"
                prefix="$itemdir/${fname}.part-"
                split -b "${PART_SIZE_MB}m" -d -a 3 --additional-suffix=".bin" "$f" "$prefix"
                echo "$fname" > "$itemdir/${fname}.manifest"
                echo "cat ${fname}.part-* > '${fname}' # reassemble" >> "$itemdir/${fname}.manifest"

                for p in $(ls "$itemdir"/${fname}.part-* 2>/dev/null || true); do
                  echo "       uploading ${p##*/}"
                  gh release upload "$TAG" "$p" --clobber
                done
                gh release upload "$TAG" "$itemdir/${fname}.manifest" --clobber
              else
                echo "    -> Uploading single file"
                gh release upload "$TAG" "$f" --clobber
              fi
            done

            # 删除该文件的本地目录
            rm -rf -- "$itemdir"
            echo "    -> Cleaned local temp for: $remote"
          done

          echo "All files processed strictly one-by-one."
